/***************************************************************************************
* Original Author:		Gabriele Giuseppini
* Created:				2018-03-25
* Copyright:			Gabriele Giuseppini  (https://github.com/GabrieleGiuseppini)
***************************************************************************************/
#pragma once

#include <cstdint>
#include <limits>

/*
 * These types define the cardinality of elements in the ElementContainer.
 *
 * Indices are equivalent to pointers in OO terms. Given that we don't believe
 * we'll ever have more than 4 billion elements, a 32-bit integer suffices.
 *
 * This also implies that where we used to store one pointer, we can now store two indices,
 * resulting in even better data locality.
 */
using ElementCount = std::uint32_t;
using ElementIndex = std::uint32_t;
static constexpr ElementIndex NoneElementIndex = std::numeric_limits<ElementIndex>::max();

/*
 * Connected component identifiers. 
 *
 * Comparable and ordered. Start from 1.
 */
using ConnectedComponentId = std::uint32_t; 

/*
 * Object ID's, as generated by the ObjectID generator.
 *
 * Not comparable, not ordered.
 */
using ObjectId = std::uint32_t;

/*
 * The different ways in which ships may be rendered.
 */
enum class ShipRenderMode
{
    Points,
    Springs,
    Structure,
    Texture
};

/*
 * Types of bombs (duh).
 */
enum class BombType
{
    TimerBomb,
    RCBomb
};